### Error messages for BaseTypeChecker
assignability.invalid=Cannot (re-)assign %s through the reference: %s
receiver.invalid=incompatible types.\nfound   : %s\nrequired: %s

array.initializer.type.incompatible=incompatible types in array initializer.\nfound   : %s\nrequired: %s
assignment.type.incompatible=incompatible types in assignment.\nfound   : %s\nrequired: %s
enhancedfor.type.incompatible=incompatible types in enhanced for loop.\nfound   : %s\nrequired: %s
vector.copyinto.type.incompatible=incompatible component type in Vector.copyinto.\nfound   : %s\nrequired: %s
return.type.incompatible=incompatible types in return.\nfound   : %s\nrequired: %s
annotation.type.incompatible=incompatible types in annotation.\nfound   : %s\nrequired: %s
conditional.type.incompatible=incompatible types in conditional expression.\nfound   : %s\nrequired: %s
type.argument.type.incompatible=incompatible types in type argument.\nfound   : %s\nrequired: %s
argument.type.incompatible=incompatible types in argument.\nfound   : %s\nrequired: %s
type.incompatible=incompatible types.\nfound   : %s\nrequired: %s

type.invalid=%s may not be applied to the type "%s"
cast.unsafe="%s" may not be casted to the type "%s"

override.return.invalid=%s in %s cannot override %s in %s; attempting to use an incompatible return type\nfound   : %s\nrequired: %s
override.param.invalid=%s in %s cannot override %s in %s; attempting to use an incompatible parameter type\nfound   : %s\nrequired: %s
override.receiver.invalid=%s in %s cannot override %s in %s; attempting to use an incompatible receiver type\nfound   : %s\nrequired: %s

method.invocation.invalid=call to %s not allowed on the given receiver.\nfound   : %s\nrequired: %s
constructor.invocation.invalid=creation of %s not allowed with given receiver;\nfound   : %s\nrequired: %s

unallowed.access=access of the field (%s) is not permitted on receiver of type (%s)
cast.redundant=Redundant cast;\ntype   : %s
