### Error messages for the Nullness Checker
dereference.of.nullable=dereference of possibly-null reference %s
iterating.over.nullable=iterating over possibly-null reference %s
unboxing.of.nullable=unboxing a possibly-null reference %s
throwing.nullable=throwing a possibly-null throwable %s
locking.nullable=synchronizing over a possibly-null lock %s
accessing.nullable=accessing a possibly-null array %s
condition.nullable=condition on a possibly-null value %s
switching.nullable=switching on a possibly-null value %s
known.nonnull=redundant check; "%s" is non-null
fields.uninitialized=constructor does not initialize fields %s
nonnullonentry.precondition.not.satisfied=precondition violated: @NonNullOnEntry("%s")
assertifxxx.only.on.boolean=return type of method with @AssertNonNullIfTrue(...) or @AssertNonNullIfFalse(...) annotation must have 
assertiftrue.only.on.boolean=@AssertNonNullIfTrue(...) annotation may only target method with boolean return type
assertiffalse.only.on.boolean=@AssertNonNullIfFalse(...) annotation may only target method with boolean return type
assertiftrue.postcondition.not.satisfied=postcondition violated: @AssertNonNullIfTrue("%s")
assertiffalse.postcondition.not.satisfied=postcondition violated: @AssertNonNullIfFalse("%s")
assert.postcondition.not.satisfied=postcondition violated: @AssertNonNullAfter("%s")
assertiftrue.nullness.condition.error=return statement in method with @AssertNonNullIfTrue annotation cannot use OR in condition
assertiffalse.nullness.condition.error=return statement in method with @AssertNonNullIfFalse annotation cannot use AND in condition
nonnull.hiding.violated=@NonNullOnEntry field "%s" is hidden
nonnull.nonstatic.with.class=Field "%s" is not static but uses a class name
nullness.parse.error=Could not parse annotation "%s"
class.not.found.nullness.parse.error=Class not found for field "%s"
field.not.found.nullness.parse.error=Field "%s" not found
zero.param.index.nullness.parse.error=Invalid parameter index in "%s"; method has no parameters
one.param.index.nullness.parse.error=Invalid parameter index in "%s", should be 1
param.index.nullness.parse.error=Invalid parameter index in "%s", should be between 1 and %s
nullness.parse.error=Parsing of "%s" failed; trusting it without checking it
method.invocation.invalid.rawness=call to %s not allowed: requires non-@Raw receiver, found uninitialized fields %s
override.pre.method.annotation.invalid=%s in %s cannot override %s in %s; attempting to strengthen method precondition\nfound   : %s\nrequired: %s
override.pre.method.annotation.part.invalid=%s in %s cannot override %s in %s; attempting to strengthen method precondition\nfound   : %s\nrequired: %s\nadded: %s
override.post.method.annotation.invalid=%s in %s cannot override %s in %s; attempting to weaken method postcondition\nfound   : %s\nrequired: %s
override.post.method.annotation.part.invalid=%s in %s cannot override %s in %s; attempting to weaken method postcondition\nfound   : %s\nrequired: %s\nmissing: %s
new.class.type.invalid=Annotations %s may not be applied in object creations
# first argument are the annotations on the component type,
# second argument is the whole array type.
new.array.type.invalid=Annotations %s may not be applied as component type for array "%s"
